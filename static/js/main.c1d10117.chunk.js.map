{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","src","alt","react_default","a","createElement","title","className","MovieGenre","_ref3","genre","Movie","_ref","posterImage","genres","synopsis","map","index","key","App","state","greeting","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","console","log","setState","stop","fetch","then","response","json","data","catch","err","_renderMovies","movie","src_Movie","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTA+CA,SAASA,EAATC,GAAiC,IAAXC,EAAWD,EAAXC,IAAKC,EAAMF,EAANE,IACvB,OACIC,EAAAC,EAAAC,cAAA,OAAKJ,IAAKA,EAAKC,IAAKA,EAAKI,MAAOJ,EAAKK,UAAU,kBAGvD,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAgBG,EAAhC,KAsBOC,MAvDf,SAAAC,GAAuD,IAAvCN,EAAuCM,EAAvCN,MAAOO,EAAgCD,EAAhCC,YAAaC,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,SACxC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,IAAKY,EAAaX,IAAKI,KAExCH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAKC,GACLH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBACRQ,MC6BNI,6MA1CbC,MAAQ,CACNC,SAAU,WAGZC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXC,QAAQC,IAAIV,GACZM,EAAKK,SAAS,CACZX,WAJS,wBAAAG,EAAAS,SAAAb,QASbQ,SAAW,WACT,OAAOM,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKjB,SACvBkB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAG5BC,cAAgB,WASd,OARed,EAAKV,MAAMI,OAAOR,IAAI,SAAA6B,GACnC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,CACLxC,MAAOuC,EAAMvC,MACbO,YAAagC,EAAME,mBACnB7B,IAAK2B,EAAMG,GACXlC,OAAQ+B,EAAM/B,OACdC,SAAU8B,EAAM9B,kGAnCpBkB,QAAQC,IAAI,0DAIZe,KAAK3B,aACLW,QAAQC,IAAI,8CAmCL,IACCV,EAAWyB,KAAK7B,MAAhBI,OACR,OACIrB,EAAAC,EAAAC,cAAA,OAAKE,UAAWiB,EAAS,MAAQ,gBAC9ByB,KAAK7B,MAAMI,OAASyB,KAAKL,gBAAmB,kBAlDrCM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.c1d10117.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\n// class Movie extends Component{\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         posterImage: PropTypes.string.isRequired\n//     }\n\n//     render() {\n//         console.log(this.props);\n//         return (\n//             <div>\n//                 <h1>{this.props.title}</h1>\n//                 <MoviePoster src={this.props.posterImage} />\n//             </div>\n//         )\n//     }\n// }\n\nfunction Movie({title, posterImage, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Colums\">\n                <MoviePoster src={posterImage} alt={title}/>\n            </div>\n            <div className=\"Movie__Colums\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <p className=\"Movie__Synopsis\">\n                    {synopsis}\n                </p>\n            </div>\n        </div>\n    )\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    posterImage: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired,\n}\n\n\nfunction MoviePoster({src, alt}) {\n    return (\n        <img src={src} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n}\nfunction MovieGenre({genre}) {\n    return (\n        <span className=\"Movie__Genre\">{genre} </span>\n    )\n}\nMoviePoster.propTypes = {\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n}\n// 위에거랑 똑같은 것. 위에거는 dumpComponent, 아래거는 smartComponent\n// class MoviePoster extends Component {\n//     static propTypes = {\n//         src: PropTypes.string.isRequired\n//     }\n//     render() {\n//         return (\n//             <img src={this.props.src} />\n//         )\n//     }\n// }\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\n\n\nclass App extends Component {\n\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: ComponentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> RENDER() -> componentDidUpdate\n\n  componentWillMount() {\n    console.log('will mount')\n  };\n\n  componentDidMount() {\n    this._getMovies();\n    console.log('did mount')\n  };\n  \n  state = {\n    greeting: \"hello\"\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    console.log(movies);\n    this.setState({\n      movies\n    });\n    \n  };\n  \n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie\n        title={movie.title} \n        posterImage={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres} \n        synopsis={movie.synopsis} />\n    })\n    return movies\n  }\n\n  render() {\n    const { movies } = this.state;  \n    return (\n        <div className={movies ? \"App\" : \"App--loading\"}>\n          {this.state.movies ? this._renderMovies() : (\"Loading\")}\n        </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}